*polymer_ide.txt*	For Vim version 8.0 and above. Last change: 2017-02-28

		    POLYMER_IDE REFERENCE MANUAL	by webdesus~


1. Overview					|polymer_ide-overview|
   1.1 Features					|polymer_ide-features|
   1.2 Requirements				|polymer_ide-requirements|
   1.3 Download					|polymer_ide-download|
   1.4 Install					|polymer_ide-install|
2. Usage    					|polymer_ide-usage|
   2.1 Options					|polymer_ide-options|
   2.2 Methods					|polymer_ide-methods|
3. History					|polymer_ide-history|	
4. Todo						|polymer_ide-todo|

==============================================================================
1. Overview 					*polymer_ide-overview*

This is polymer_ide plugin for vim version 8.0 and above. This plugin unlocks all of
the power of the [Polymer Analyzer](https://github.com/Polymer/polymer-analyzer) in vim.
See [Polymer Editor Service](https://github.com/Polymer/polymer-editor-service) for
more info, including links to other editor plugins.

1.1 Features					*polymer_ide-features*

- typeahead completions for imported elements, with documentation;
- typeahead completions for element attributes, with documentation;
- inline errors (marks on lines);
- jump to definition support for custom elements and attributes;

1.2 Requirements				*polymer_ide-requirements*

- Vim version 8.0 and above support;
- node.js; 
- UltiSnips(option) for supprots snippets;
- Syntax(option);

1.3 Download					*polymer_ide-download*

You can download the lastest version from this url:
	https://github.com/webdesus/polymer_ide.vim

For work using snippets needed install UltiSnips from this url:
	https://github.com/SirVer/ultisnips

1.4 Install					*polymer_ide-install*

* This assumes you are using [Vundle](https://github.com/gmarik/Vundle.vim). 
Adapt for your plugin manager of choice. Put this into your `.vimrc`. >

    Plugin 'webdesus/polymer_ide.vim'
<
* By default omnifunc options work for html files, but you can set and for other >

    autocmd Filetype xhtml setlocal omnifunc=polymer_ide#Complete
<
* Map keys you prefer:

      Go to definition using {F12} key: >

	 autocmd Filetype html nmap <F12> :call polymer_ide#GoToDefinition(':vs')<CR>
	 autocmd Filetype html imap <F12> :call polymer_ide#GoToDefinition(':vs')<CR>
<
      Show documentation about tag or attribute using {F1} key: >

	 autocmd Filetype html imap nmap <F1> :call polymer_ide#ShowDocumentation()<CR>
	 autocmd Filetype html imap imap <F1> :call polymer_ide#ShowDocumentation()<CR>
<
      Show error under cursor {F2} key: >

	 autocmd Filetype html nmap <F2> :call polymer_ide#ShowError(line('.'))<CR>
	 autocmd Filetype html imap <F2> :call polymer_ide#ShowError(line('.'))<CR>
< 
      Show next error under cursor {Ctrl}, {Alt} and {down} keys: >

	 autocmd Filetype html nmap <C-A-DOWN> :call polymer_ide#NextError()<CR>
	 autocmd Filetype html imap <C-A-DOWN> :call polymer_ide#NextError()<CR>
<
      Show previous error under cursor {Ctrl}, {Alt} and {up} keys: >

	 autocmd Filetype html nmap <C-A-UP> :call polymer_ide#PreviousError()<CR>
	 autocmd Filetype html imap <C-A-UP> :call polymer_ide#PreviousError()<CR>
 

==============================================================================
2. Usage    					 *poylymer_ide-usage*

You can use it like other omni-completion script. But you also can use various 
approaches using ours methods and options.


2.1 Options					 *polymer_ide-options*

* Enable event TextChanged for find errors. 
Careful: This is triggered very often, don't do anything that the 
user does not expect or that is slow. >

  let g:polymer_ide#on_buffer_text_change = 1
<
* Enable snippets support. 
Careful: For successful work required installed plugin UltiSnips  >
  let g:polymer_ide#use_snippets = 1

* Enable Syntastic support. 
Careful: For successful work required installed plugin Syntastic   >
  let g:polymer_ide#use_syntastic = 1
  let g:syntastic_html_checkers = [ 'polylint']

<
2.2 Methods					 *polymer_ide-methods*


* polymer_ide#Enable()                    	 *polymer_ide#Enable*
	Load polymer_ide plugin

* polymer_ide#Complete()                    	 *polymer_ide#Complete*
	Return list element-tags or attributes depending on the context

* polymer_ide#ShowError({line})                  *polymer_ide#ShowError*
	If {line} has error move cursor and show in console error message. 

* polymer_ide#NextError()                        *polymer_ide#NextError*
	Move cursor to next error and show error message in console.

* polymer_ide#PreviousError()                    *polymer_ide#PreviousError*
	Move cursor to previous error and show error message in console.

* polymer_ide#GoToDefinition({cmd})              *polymer_ide#GoToDefinition*
	Open file with definition element under cursor.{cmd} might have all
various open file(like tab (see |:tabnew|) , like vertical buffer(see |:vs|) and etc)

* polymer_ide#ShowDocumentation()                *polymer_ide#ShowDocumentation*
	Show documentation information about element or attribute under cursor 
in preview window.

==============================================================================
3. History					 *polymer_ide-history*

  v0.4.3 2017-03-20     Fixed problem snippets for YouCompleteMe
  v0.4.2 2017-03-06     Fixed problem install polymer-editor-service
  v0.4.1 2017-02-28     Little changes docs
  v0.4 2017-02-28     	Integration with Syntastic  
  v0.3.1 2016-12-11     Fixed remove signs on a fields 
  v0.3 2016-11-29       Added support various opening file when using method 
"go to definition" 
  v0.2 2016-11-28       Support snippets	
  v0.1 2016-11-23	First release

==============================================================================
4. Todo					         *polymer_ide-todo*

-  Get references for element
-  Linting
-  Better highlight
-  Write tests
-  etc...

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
